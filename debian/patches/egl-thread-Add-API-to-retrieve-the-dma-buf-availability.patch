From: Pascal Nowack <Pascal.Nowack@gmx.de>
Date: Tue, 12 Apr 2022 08:39:32 +0200
Subject: egl-thread: Add API to retrieve the dma-buf availability

With the NVIDIA 495 driver and later, NVIDIA supports GBM, but
apparently is still unable to create or import dma-bufs.
As a result, connecting to gnome-remote-desktop, which runs on a system
with an NVIDIA GPU and the 495 driver or later, results in a black
screen.

So, add an API to retrieve the dma-buf support availability.
Also treat the EGL platform EGL_PLATFORM_DEVICE_EXT always as
unsupported-for-dma-bufs.
This still allows the EGL thread to be used to upload frame content for
the use in CUDA and NVENC, while using dma-bufs on systems, that don't
suffer from such defects.
---
 src/grd-egl-thread.c | 9 +++++++++
 src/grd-egl-thread.h | 2 ++
 2 files changed, 11 insertions(+)

diff --git a/src/grd-egl-thread.c b/src/grd-egl-thread.c
index e4fdcf9..d611172 100644
--- a/src/grd-egl-thread.c
+++ b/src/grd-egl-thread.c
@@ -32,6 +32,8 @@ struct _GrdEglThread
   GMutex mutex;
   GCond cond;
 
+  gboolean supports_dma_bufs;
+
   GAsyncQueue *task_queue;
 
   GHashTable *modifiers;
@@ -378,6 +380,7 @@ grd_egl_init_in_impl (GrdEglThread  *egl_thread,
     {
       g_debug ("EGL context initialized with platform "
                "EGL_PLATFORM_SURFACELESS_MESA");
+      egl_thread->supports_dma_bufs = TRUE;
     }
   else
     {
@@ -620,6 +623,12 @@ grd_egl_thread_free (GrdEglThread *egl_thread)
   g_free (egl_thread);
 }
 
+gboolean
+grd_egl_thread_supports_dma_bufs (GrdEglThread *egl_thread)
+{
+  return egl_thread->supports_dma_bufs;
+}
+
 static EGLImageKHR
 create_dmabuf_image (GrdEglThread   *egl_thread,
                      unsigned int    width,
diff --git a/src/grd-egl-thread.h b/src/grd-egl-thread.h
index 93fa891..2a92dbb 100644
--- a/src/grd-egl-thread.h
+++ b/src/grd-egl-thread.h
@@ -43,6 +43,8 @@ GrdEglThread * grd_egl_thread_new (GError **error);
 
 void grd_egl_thread_free (GrdEglThread *egl_thread);
 
+gboolean grd_egl_thread_supports_dma_bufs (GrdEglThread *egl_thread);
+
 void grd_egl_thread_download (GrdEglThread                  *egl_thread,
                               uint32_t                       pbo,
                               uint32_t                       pbo_height,
